# File: .github/workflows/android_ci.yml

name: Android CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest # Standard GitHub-hosted runner

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4 # Using the latest stable version

      # Step 2: Set up Java Development Kit (JDK)
      # This action sets up the specified Java version and also handles Gradle caching.
      - name: Set up JDK 11
        uses: actions/setup-java@v4 # Using the latest stable version
        with:
          java-version: '11'
          distribution: 'temurin' # A widely used and reliable JDK distribution
          cache: 'gradle' # Enable Gradle caching for faster dependency resolution

      # Step 3: Set up Android SDK
      # This action ensures all necessary Android SDK components are available.
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2 # Stable version for Android SDK setup
        # You can specify specific SDK platforms or build tools if your project requires them.
        # Example: sdk-platforms: 'platforms;android-34'
        # Example: build-tools: 'build-tools;34.0.0'

      # Step 4: Configure Gradle for performance (optional but recommended)
      # This creates a gradle.properties file to enable the Gradle Daemon and parallel execution.
      - name: Configure Gradle Daemon and Parallel Execution
        run: |
          echo "org.gradle.daemon=true" >> gradle.properties
          echo "org.gradle.parallel=true" >> gradle.properties
          echo "org.gradle.configureondemand=true" >> gradle.properties
          # You can also add more JVM memory if your project is large:
          # echo "org.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon.idletimeout=3600000" >> gradle.properties
          cat gradle.properties # Print the content for debugging/verification

      # Step 5: Grant execute permission to the Gradle wrapper script
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Step 6: Build the Android project with Gradle
      # The 'build' task typically includes 'assembleDebug' and 'testDebugUnitTest'.
      - name: Build with Gradle
        # If your Android project is not at the repository root, specify working-directory:
        # working-directory: ./your-android-app-folder
        run: ./gradlew build

      # Step 7: Upload the generated APK as an artifact
      # This makes the compiled APK available for download from the GitHub Actions run.
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4 # Using the latest stable version
        with:
          name: app-debug-apk
          # Standard path for a debug APK generated by Gradle
          path: app/build/outputs/apk/debug/app-debug.apk
          # If your project structure is different, adjust this path accordingly.
