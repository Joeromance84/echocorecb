# File: .github/workflows/java_build.yml

name: EchoCore Java Build & Test

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up the Java environment
      # We need a modern JDK to run this code. Java 17 is a good choice.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      # Step 3: Create the base directories for the application
      # The Java code expects these directories to exist. We'll create them here.
      - name: Create EchoAI directories
        run: |
          mkdir -p .echoai_future/{plugins,training,logs,fake_includes}

      # Step 4: Compile the Java source code
      # This command translates the .java file into a .class file.
      - name: Compile EchoCore
        run: javac EchoCoreUnifiedFuture.java

      # Step 5: Run the compiled Java application
      # This step executes your program, triggering all its internal logic.
      - name: Run EchoCoreUnifiedFuture
        run: java EchoCoreUnifiedFuture

      # Step 6: Upload the compiled code as a build artifact
      # This saves the .class files, which you can download for later use or inspection.
      - name: Upload Compiled Code
        uses: actions/upload-artifact@v4
        with:
          name: EchoCore-compiled
          path: ./*.class
