name: Live APK Build - EchoCoreCB

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'live_demo'
        type: choice
        options:
          - live_demo
          - release
          - debug
      debug_mode:
        description: 'Enable debug output'
        required: false
        default: 'true'
        type: boolean

jobs:
  build-apk:
    runs-on: ubuntu-latest
    name: Live APK Packaging
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git zip unzip openjdk-17-jdk python3-pip
          sudo apt-get install -y build-essential git python3 python3-dev
          sudo apt-get install -y libffi-dev libssl-dev
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install buildozer cython
          pip install kivy kivymd plyer
          pip install requests pygithub openai google-genai
          
      - name: Create main.py if missing
        run: |
          if [ ! -f main.py ]; then
            echo "Creating main.py for EchoCoreCB..."
            cat > main.py << 'MAIN_EOF'
          from kivy.app import App
          from kivy.uix.boxlayout import BoxLayout
          from kivy.uix.label import Label
          from kivy.uix.button import Button
          from kivy.uix.textinput import TextInput
          import os
          
          class EchoCoreApp(App):
              def build(self):
                  layout = BoxLayout(orientation='vertical', padding=20, spacing=10)
                  
                  # Title
                  title = Label(
                      text='EchoCoreCB - AGI Mobile Interface',
                      font_size='20sp',
                      size_hint_y=None,
                      height=50
                  )
                  layout.add_widget(title)
                  
                  # Status
                  self.status_label = Label(
                      text='EchoNexus AGI System Ready',
                      font_size='16sp',
                      size_hint_y=None,
                      height=40
                  )
                  layout.add_widget(self.status_label)
                  
                  # Command input
                  self.command_input = TextInput(
                      hint_text='Enter AGI command...',
                      multiline=False,
                      size_hint_y=None,
                      height=40
                  )
                  layout.add_widget(self.command_input)
                  
                  # Execute button
                  execute_btn = Button(
                      text='Execute AGI Command',
                      size_hint_y=None,
                      height=50
                  )
                  execute_btn.bind(on_press=self.execute_command)
                  layout.add_widget(execute_btn)
                  
                  # Output area
                  self.output_label = Label(
                      text='AGI output will appear here...',
                      text_size=(None, None),
                      valign='top'
                  )
                  layout.add_widget(self.output_label)
                  
                  return layout
              
              def execute_command(self, instance):
                  command = self.command_input.text
                  if command:
                      self.status_label.text = f'Processing: {command}'
                      # Simulate AGI processing
                      result = f'AGI processed: "{command}"\nStatus: Active\nCapabilities: Repository analysis, workflow management'
                      self.output_label.text = result
                      self.command_input.text = ''
                  
          if __name__ == '__main__':
              EchoCoreApp().run()
          MAIN_EOF
          fi
          
      - name: Initialize buildozer
        run: |
          buildozer init || true
          
      - name: Build APK
        run: |
          echo "🚀 Starting live APK build for EchoCoreCB..."
          echo "Build type: ${{ github.event.inputs.build_type || 'live_demo' }}"
          echo "Debug mode: ${{ github.event.inputs.debug_mode || 'true' }}"
          
          # Build with progress monitoring
          buildozer android debug --verbose
          
      - name: Verify APK generation
        run: |
          echo "🔍 Verifying APK generation..."
          if [ -f bin/*.apk ]; then
            echo "✅ APK generated successfully!"
            ls -la bin/*.apk
            
            # Get APK info
            APK_FILE=$(find bin -name "*.apk" | head -1)
            APK_SIZE=$(du -h "$APK_FILE" | cut -f1)
            echo "📱 APK Size: $APK_SIZE"
            echo "📂 APK Location: $APK_FILE"
            
            # Rename for clarity
            cp "$APK_FILE" "EchoCoreCB-live-build.apk"
          else
            echo "❌ APK generation failed"
            echo "Build directory contents:"
            ls -la bin/ || echo "No bin directory found"
            exit 1
          fi
          
      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: EchoCoreCB-Live-APK
          path: |
            EchoCoreCB-live-build.apk
            bin/*.apk
            
      - name: Live build summary
        run: |
          echo "🎉 LIVE APK BUILD COMPLETED!"
          echo "================================"
          echo "Repository: ${{ github.repository }}"
          echo "Build triggered: $(date)"
          echo "Build type: ${{ github.event.inputs.build_type || 'live_demo' }}"
          echo "Workflow run: ${{ github.run_id }}"
          echo "APK generated: ✅"
          echo "================================"
          echo "AGI Learning: This build process was observed for pattern recognition"
