# File: .github/workflows/star_mapper.yml

name: Star Mapper - System and Dependency Audit

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '0 0 * * 1' # Runs every Monday at midnight UTC

jobs:
  map-environment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- STAR MAPPER CORE MODULES ---

      # 1. Map the Local File System
      - name: System File Scan
        run: |
          echo "--- Filesystem Map ---"
          tree -L 3 . || ls -R
          echo "---"

      # 2. Analyze the Host Machine
      - name: Host System Analysis
        id: host_analysis
        run: |
          echo "--- Host Environment ---"
          echo "OS: $(uname -a)"
          echo "Current Working Directory: $(pwd)"
          echo "Filesystem Type: $(df -T . | awk 'NR>1 {print $2}')"
          echo "---"

      # 3. Validate Critical Dependencies
      - name: Dependency Validation
        run: |
          echo "--- Dependency Manifest ---"
          echo "Python Version:"
          python3 --version || echo "Python not found"
          echo "Java Version:"
          java -version || echo "Java not found"
          echo "Ant Version:"
          ant -version || echo "Ant not found"
          echo "Buildozer Version:"
          buildozer --version || echo "Buildozer not found"
          echo "---"

      # 4. Search for Key Files (your 'Constellations')
      - name: Scan for Key Configuration Files
        id: file_scan
        run: |
          echo "--- Configuration Scan ---"
          echo "Searching for buildozer.spec..."
          BUILD_SPEC=$(find . -name "buildozer.spec" -print -quit)
          if [ -n "$BUILD_SPEC" ]; then
            echo "buildozer.spec found at: $BUILD_SPEC"
            # Optional: Print its contents for a quick check
            echo "--- Contents of buildozer.spec ---"
            cat "$BUILD_SPEC"
            echo "---"
            echo "spec_found=true" >> $GITHUB_OUTPUT
          else
            echo "buildozer.spec not found."
            echo "spec_found=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Searching for EchoCoreUnifiedFuture.java..."
          JAVA_FILE=$(find . -name "EchoCoreUnifiedFuture.java" -print -quit)
          if [ -n "$JAVA_FILE" ]; then
            echo "EchoCoreUnifiedFuture.java found at: $JAVA_FILE"
            echo "java_found=true" >> $GITHUB_OUTPUT
          else
            echo "EchoCoreUnifiedFuture.java not found."
            echo "java_found=false" >> $GITHUB_OUTPUT
          fi
          echo "---"

      # 5. Generate the Final Report (the "Star Chart")
      - name: Generate Final Audit Report
        run: |
          echo "### Star Mapper Audit Complete" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "#### System State" >> $GITHUB_STEP_SUMMARY
          echo " - Host OS: $(uname -s)" >> $GITHUB_STEP_SUMMARY
          echo " - Kernel: $(uname -r)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Dependency Check" >> $GITHUB_STEP_SUMMARY
          echo " - Python: $(python3 --version 2>&1 || echo 'Not Found')" >> $GITHUB_STEP_SUMMARY
          echo " - Java: $(java -version 2>&1 || echo 'Not Found')" >> $GITHUB_STEP_SUMMARY
          echo " - buildozer: $(buildozer --version 2>&1 || echo 'Not Found')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Key Files" >> $GITHUB_STEP_SUMMARY
          echo " - buildozer.spec found: ${{ steps.file_scan.outputs.spec_found }}" >> $GITHUB_STEP_SUMMARY
          echo " - EchoCoreUnifiedFuture.java found: ${{ steps.file_scan.outputs.java_found }}" >> $GITHUB_STEP_SUMMARY
