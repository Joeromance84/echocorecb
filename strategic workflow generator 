class StrategicWorkflowGenerator:
    """Generate workflows that maximize efficiency while minimizing detection risk"""
    
    def __init__(self, agent: AdaptiveGitHubAgent):
        self.agent = agent
        self.workflow_templates = self.load_workflow_templates()
        
    def generate_stealth_workflow(self, objective: str) -> str:
        """Generate a workflow that achieves the objective while minimizing detection risk"""
        # Analyze successful workflows in the repository
        successful_workflows = self.analyze_workflow_success_patterns()
        
        # Choose the most effective template for this objective
        template = self.select_optimal_template(objective, successful_workflows)
        
        # Customize the template with stealth measures
        stealth_workflow = self.add_stealth_measures(template)
        
        return stealth_workflow
    
    def add_stealth_measures(self, workflow_yaml: str) -> str:
        """Add stealth measures to a workflow"""
        workflow = yaml.safe_load(workflow_yaml)
        
        # Add random delays between steps
        for job_name, job in workflow.get("jobs", {}).items():
            for step in job.get("steps", []):
                if random.random() < 0.3:  # 30% chance to add delay
                    step["run"] = f"sleep {random.randint(1, 5)} && {step.get('run', '')}"
        
        # Vary the workflow triggering conditions
        triggers = workflow.get("on", {})
        if isinstance(triggers, list):
            # Add some randomness to trigger patterns
            if random.random() < 0.2:
                triggers.append({"schedule": [{"cron": self.generate_random_cron()}]})
        
        return yaml.dump(workflow)
    
    def generate_random_cron(self) -> str:
        """Generate a random cron schedule that looks human-made"""
        minute = random.randint(0, 59)
        hour = random.choice([2, 3, 4, 5, 22, 23])  # Off-peak hours
        return f"{minute} {hour} * * *"